#!/usr/bin/env python3
"""
Consolidate all secret information into a single .env file
This script combines all configuration from various sources into one secure .env file
"""

import os
import shutil
from dotenv import load_dotenv

def print_banner():
    """Print consolidation banner"""
    print("=" * 70)
    print("üîí SMIED - Secret Consolidation Tool")
    print("=" * 70)
    print("This script will consolidate all secret information into a single .env file")
    print()

def consolidate_secrets():
    """Consolidate all secrets into .env file"""
    print("üîç Scanning for existing configuration files...")
    
    # Check for existing .env file
    if os.path.exists('.env'):
        backup = input("‚ö†Ô∏è  .env file already exists. Create backup? (y/N): ")
        if backup.lower() == 'y':
            shutil.copy('.env', '.env.backup')
            print("‚úÖ Backup created as .env.backup")
    
    # Load existing configuration
    config_sources = []
    
    # Check aiven_config.env
    if os.path.exists('aiven_config.env'):
        load_dotenv('aiven_config.env')
        config_sources.append('aiven_config.env')
        print("‚úÖ Found aiven_config.env")
    
    # Check config.env.template
    if os.path.exists('config.env.template'):
        config_sources.append('config.env.template')
        print("‚úÖ Found config.env.template")
    
    # Check aiven_setup.env.template
    if os.path.exists('aiven_setup.env.template'):
        config_sources.append('aiven_setup.env.template')
        print("‚úÖ Found aiven_setup.env.template")
    
    if not config_sources:
        print("‚ùå No configuration files found!")
        return False
    
    print(f"\nüìã Found {len(config_sources)} configuration source(s)")
    
    # Create consolidated .env file
    print("\nüîß Creating consolidated .env file...")
    
    env_content = """# SMIED - Complete Environment Configuration
# This file contains ALL sensitive data and should not be committed to version control
# Generated by consolidate_secrets.py

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# Primary database connection string
DATABASE_URL={DATABASE_URL}

# Aiven Database Details (for reference and setup scripts)
AIVEN_DB_HOST={AIVEN_DB_HOST}
AIVEN_DB_PORT={AIVEN_DB_PORT}
AIVEN_DB_NAME={AIVEN_DB_NAME}
AIVEN_DB_USER={AIVEN_DB_USER}
AIVEN_DB_PASSWORD={AIVEN_DB_PASSWORD}
AIVEN_DB_SSL_MODE={AIVEN_DB_SSL_MODE}

# =============================================================================
# FLASK APPLICATION CONFIGURATION
# =============================================================================
# Flask secret key (generate a strong random string)
SECRET_KEY={SECRET_KEY}
FLASK_ENV={FLASK_ENV}
BASE_URL={BASE_URL}

# Database capacity monitoring
DATABASE_TOTAL_CAPACITY_GB={DATABASE_TOTAL_CAPACITY_GB}

# =============================================================================
# DEFAULT USER PASSWORDS
# =============================================================================
# Change these for production deployment
SUPER_ADMIN_PASSWORD={SUPER_ADMIN_PASSWORD}
ADMIN_PASSWORD={ADMIN_PASSWORD}
TEACHER_PASSWORD={TEACHER_PASSWORD}
PARENT_PASSWORD={PARENT_PASSWORD}

# =============================================================================
# EMAIL CONFIGURATION
# =============================================================================
# SMTP settings for email notifications
MAIL_SERVER={MAIL_SERVER}
MAIL_PORT={MAIL_PORT}
MAIL_USE_TLS={MAIL_USE_TLS}
MAIL_USE_SSL={MAIL_USE_SSL}
MAIL_USERNAME={MAIL_USERNAME}
MAIL_PASSWORD={MAIL_PASSWORD}
MAIL_DEFAULT_SENDER={MAIL_DEFAULT_SENDER}
MAIL_MAX_EMAILS={MAIL_MAX_EMAILS}
MAIL_SUPPRESS_SEND={MAIL_SUPPRESS_SEND}

# =============================================================================
# PAYMENT CONFIGURATION (PAYSTACK)
# =============================================================================
# Paystack payment gateway settings
PAYSTACK_PUBLIC_KEY={PAYSTACK_PUBLIC_KEY}
PAYSTACK_SECRET_KEY={PAYSTACK_SECRET_KEY}
PAYSTACK_WEBHOOK_SECRET={PAYSTACK_WEBHOOK_SECRET}

# =============================================================================
# ADDITIONAL SECRETS (if needed)
# =============================================================================
# Add any other sensitive configuration here
# API_KEYS=your_api_keys
# JWT_SECRET=your_jwt_secret
# ENCRYPTION_KEY=your_encryption_key
"""
    
    # Get current environment variables
    env_vars = {
        'DATABASE_URL': os.getenv('DATABASE_URL', 'postgresql://username:password@host:port/database?sslmode=require'),
        'AIVEN_DB_HOST': os.getenv('AIVEN_DB_HOST', 'your-db-host.aivencloud.com'),
        'AIVEN_DB_PORT': os.getenv('AIVEN_DB_PORT', '27725'),
        'AIVEN_DB_NAME': os.getenv('AIVEN_DB_NAME', 'your_database_name'),
        'AIVEN_DB_USER': os.getenv('AIVEN_DB_USER', 'avnadmin'),
        'AIVEN_DB_PASSWORD': os.getenv('AIVEN_DB_PASSWORD', 'your_db_password'),
        'AIVEN_DB_SSL_MODE': os.getenv('AIVEN_DB_SSL_MODE', 'require'),
        'SECRET_KEY': os.getenv('SECRET_KEY', 'your-secret-key-here-change-this-in-production'),
        'FLASK_ENV': os.getenv('FLASK_ENV', 'production'),
        'BASE_URL': os.getenv('BASE_URL', 'http://127.0.0.1:5000'),
        'DATABASE_TOTAL_CAPACITY_GB': os.getenv('DATABASE_TOTAL_CAPACITY_GB', '1'),
        'SUPER_ADMIN_PASSWORD': os.getenv('SUPER_ADMIN_PASSWORD', 'superadmin123'),
        'ADMIN_PASSWORD': os.getenv('ADMIN_PASSWORD', 'admin123'),
        'TEACHER_PASSWORD': os.getenv('TEACHER_PASSWORD', 'teacher123'),
        'PARENT_PASSWORD': os.getenv('PARENT_PASSWORD', 'parent123'),
        'MAIL_SERVER': os.getenv('MAIL_SERVER', 'smtp.gmail.com'),
        'MAIL_PORT': os.getenv('MAIL_PORT', '587'),
        'MAIL_USE_TLS': os.getenv('MAIL_USE_TLS', 'True'),
        'MAIL_USE_SSL': os.getenv('MAIL_USE_SSL', 'False'),
        'MAIL_USERNAME': os.getenv('MAIL_USERNAME', 'your-email@gmail.com'),
        'MAIL_PASSWORD': os.getenv('MAIL_PASSWORD', 'your-app-password'),
        'MAIL_DEFAULT_SENDER': os.getenv('MAIL_DEFAULT_SENDER', 'your-email@gmail.com'),
        'MAIL_MAX_EMAILS': os.getenv('MAIL_MAX_EMAILS', '100'),
        'MAIL_SUPPRESS_SEND': os.getenv('MAIL_SUPPRESS_SEND', 'False'),
        'PAYSTACK_PUBLIC_KEY': os.getenv('PAYSTACK_PUBLIC_KEY', 'pk_live_your_public_key'),
        'PAYSTACK_SECRET_KEY': os.getenv('PAYSTACK_SECRET_KEY', 'sk_live_your_secret_key'),
        'PAYSTACK_WEBHOOK_SECRET': os.getenv('PAYSTACK_WEBHOOK_SECRET', 'your_webhook_secret'),
    }
    
    # Format the content with actual values
    formatted_content = env_content.format(**env_vars)
    
    try:
        with open('.env', 'w') as f:
            f.write(formatted_content)
        print("‚úÖ Consolidated .env file created successfully!")
        return True
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

def verify_consolidation():
    """Verify the consolidated .env file"""
    print("\nüîç Verifying consolidated configuration...")
    
    try:
        # Load the new .env file
        load_dotenv('.env', override=True)
        
        # Check critical variables
        critical_vars = [
            'DATABASE_URL',
            'SECRET_KEY',
            'AIVEN_DB_HOST',
            'AIVEN_DB_PASSWORD'
        ]
        
        missing_vars = []
        for var in critical_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ö†Ô∏è  Missing critical variables: {', '.join(missing_vars)}")
            return False
        else:
            print("‚úÖ All critical variables found")
            return True
            
    except Exception as e:
        print(f"‚ùå Error verifying configuration: {e}")
        return False

def main():
    """Main consolidation function"""
    print_banner()
    
    try:
        # Consolidate secrets
        if not consolidate_secrets():
            print("üí• Consolidation failed")
            return False
        
        # Verify consolidation
        if not verify_consolidation():
            print("‚ö†Ô∏è  Consolidation completed but verification failed")
            print("   Please check your .env file manually")
        else:
            print("\n" + "="*70)
            print("üéâ Secret consolidation completed successfully!")
            print("="*70)
            print()
            print("‚úÖ All secrets consolidated into .env file")
            print("‚úÖ Configuration verified")
            print("‚úÖ Ready to use with SMIED application")
            print()
            print("üöÄ Next steps:")
            print("   1. Review your .env file to ensure all values are correct")
            print("   2. Start your application: python app.py")
            print("   3. The application will now use the consolidated .env file")
            print()
            print("üîí Security reminder:")
            print("   ‚Ä¢ .env file is excluded from version control")
            print("   ‚Ä¢ Keep your .env file secure and private")
            print("   ‚Ä¢ Never share or commit your .env file")
        
        return True
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Consolidation cancelled by user")
        return False
    except Exception as e:
        print(f"\nüí• Consolidation failed: {e}")
        return False

if __name__ == '__main__':
    main()
